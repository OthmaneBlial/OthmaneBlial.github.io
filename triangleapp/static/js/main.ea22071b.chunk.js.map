{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","values","type","_this$state$values","sideOne","sideTwo","sideThree","setState","_this2","react_default","a","createElement","className","data-ts","formik_esm","initialValues","validationSchema","Yup","shape","required","onSubmit","_ref","setSubmitting","resetForm","setErrors","findsOutTriangleType","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","name","value","onChange","onBlur","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea22071b.chunk.js","sourcesContent":["/**\r\n * @author Blial Othmane\r\n *\r\n * Finding out if a Triangle is is Equilateral, Isosceles or Scalene\r\n * An equilateral triangle is a triangle where its three sides are equal.\r\n * An isosceles triangle is a triangle that has two sides of equal length.\r\n * A scalene triangle is a triangle that all its sides are not equal.\r\n *\r\n * Solving the problem while provinding a simple UI:\r\n * We are asking the user to enter the three sides of the triangle,\r\n * then, we should check that the user enters a number, and also not let the input empty,\r\n * otherwise, the submit button should be disabled, so the user will not send wrong data.\r\n * After that, we should check, based on the three sides values, the type of the triangle,\r\n * then, we render the result below the form, and reset the form,\r\n * so the user can enter new values and check out another triangle's type.\r\n * @param {Object of numbers} values: {sideOne, sideTwo, sideThree} - Triangle's sides\r\n * @param {string} type - Triangle's type\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./index.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      values: {},\r\n      type: \"Equilateral\"\r\n    };\r\n  }\r\n\r\n  findsOutTriangleType() {\r\n    const { sideOne, sideTwo, sideThree } = this.state.values;\r\n    if (sideOne === sideTwo || sideTwo !== sideThree || sideTwo !== sideThree)\r\n      this.setState({ type: \"Isosceles\" });\r\n    if (sideOne === sideTwo && sideTwo === sideThree)\r\n      this.setState({ type: \"Equilateral\" });\r\n    if (sideOne !== sideTwo && sideTwo !== sideThree)\r\n      this.setState({ type: \"Scalene\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" data-ts=\"Main\">\r\n        <div className=\"form-container\">\r\n          <h1 className=\"title\">The Triangle Type</h1>\r\n          <Formik\r\n            initialValues={{ sideOne: 0, sideTwo: 0, sideThree: 0 }}\r\n            validationSchema={Yup.object().shape({\r\n              sideOne: Yup.number().required(\"Required\"),\r\n              sideTwo: Yup.number().required(\"Required\"),\r\n              sideThree: Yup.number().required(\"Required\")\r\n            })}\r\n            onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\r\n              this.setState(\r\n                {\r\n                  values: values\r\n                },\r\n                () => {\r\n                  this.findsOutTriangleType();\r\n                  setSubmitting(false);\r\n                  resetForm();\r\n                }\r\n              );\r\n            }}\r\n          >\r\n            {props => {\r\n              const {\r\n                values,\r\n                touched,\r\n                errors,\r\n                isSubmitting,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit\r\n              } = props;\r\n              return (\r\n                <form data-ts=\"Form\" onSubmit={handleSubmit}>\r\n                  <h4 className=\"form-title\">\r\n                    Please enter the sides of the Triangle\r\n                  </h4>\r\n                  <fieldset>\r\n                    <label\r\n                      className={\r\n                        errors.sideOne && touched.sideOne ? \"ts-error\" : \"\"\r\n                      }\r\n                    >\r\n                      <span>Side One</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"sideOne\"\r\n                        value={values.sideOne}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </label>\r\n                    {errors.sideOne &&\r\n                      touched.sideOne && (\r\n                        <dl className=\"ts-errors\">\r\n                          <dt>You must enter a number</dt>\r\n                        </dl>\r\n                      )}\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                    <label\r\n                      className={\r\n                        errors.sideTwo && touched.sideTwo ? \"ts-error\" : \"\"\r\n                      }\r\n                    >\r\n                      <span>Side One</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"sideTwo\"\r\n                        value={values.sideTwo}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </label>\r\n                    {errors.sideTwo &&\r\n                      touched.sideTwo && (\r\n                        <dl className=\"ts-errors\">\r\n                          <dt>You must enter a number</dt>\r\n                        </dl>\r\n                      )}\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                    <label\r\n                      className={\r\n                        errors.sideThree && touched.sideThree ? \"ts-error\" : \"\"\r\n                      }\r\n                    >\r\n                      <span>Side One</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"sideThree\"\r\n                        value={values.sideThree}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </label>\r\n                    {errors.sideThree &&\r\n                      touched.sideThree && (\r\n                        <dl className=\"ts-errors\">\r\n                          <dt>You must enter a number</dt>\r\n                        </dl>\r\n                      )}\r\n                  </fieldset>\r\n\r\n                  <button\r\n                    type=\"submit\"\r\n                    data-ts=\"Button\"\r\n                    disabled={\r\n                      isSubmitting ||\r\n                      (errors.sideOne && touched.sideOne) ||\r\n                      (errors.sideTwo && touched.sideTwo) ||\r\n                      (errors.sideThree && touched.sideThree)\r\n                    }\r\n                    className=\"ts-primary btn-large has-shadow\"\r\n                  >\r\n                    <span>Finds out the Triangle Type</span>\r\n                  </button>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n          <div className=\"triangle-type\">\r\n            <h4 className=\"triangle-type-text\">\r\n              This triangle is {this.state.type}\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}